{"version":3,"sources":["../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","TimerWaktu.js","apptimer.js"],"names":["TimerWaktu","numberDurationInput","startButtonEl","pauseButtonEl","callbacks","onStartCallback","onStart","onTickCallback","onTick","onCompleteCallback","onComplete","intervalId","initListenerEl","addEventListener","event","startTimer","pauseTimer","timeRemaining","tickWaktu","setInterval","clearInterval","parseFloat","value","time","toFixed","durasiInputEl","document","querySelector","circleTimerElement","latarCircleTimerEl","radiusString","getAttribute","lingkarPerimeter","Math","PI","setAttribute","currentOffsetDash","totalDurationTimer","timerWaktu","totalDuration","console","log"],"mappings":";AAAA,SAAA,EAAA,EAAA,GACA,KAAA,aAAA,GACA,MAAA,IAAA,UAAA,qCAIA,OAAA,QAAA;;ACNA,SAAA,EAAA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,WAAA,EAAA,aAAA,EACA,EAAA,cAAA,EACA,UAAA,IAAA,EAAA,UAAA,GACA,OAAA,eAAA,EAAA,EAAA,IAAA,IAIA,SAAA,EAAA,EAAA,EAAA,GAGA,OAFA,GAAA,EAAA,EAAA,UAAA,GACA,GAAA,EAAA,EAAA,GACA,EAGA,OAAA,QAAA;;ACsDK,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,EAAA,QAAA,0CAAA,EAAA,EAAA,QAAA,uCAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GArEgBA,IAAAA,EAqEhB,WApEWC,SAAAA,EAAAA,EAAqBC,EAAeC,EAAeC,IAAW,EAAA,EAAA,SAAA,KAAA,GACjEH,KAAAA,oBAAsBA,EACtBC,KAAAA,cAAgBA,EAChBC,KAAAA,cAAgBA,EAEjBC,IACKC,KAAAA,gBAAkBD,EAAUE,QAC5BC,KAAAA,eAAiBH,EAAUI,OAC3BC,KAAAA,mBAAqBL,EAAUM,YAGnCC,KAAAA,WAAa,EAEbC,KAAAA,iBAuDR,OAAA,EAAA,EAAA,SAAA,EAAA,CAAA,CAAA,IAAA,iBApDgB,MAAA,WAAA,IAAA,EAAA,KAERV,KAAAA,cAAcW,iBAAiB,QAAS,SAAAC,GACzC,EAAKC,WAAWD,KAGfX,KAAAA,cAAcU,iBAAiB,QAAS,SAAAC,GACzC,EAAKE,WAAWF,OA6CvB,CAAA,IAAA,aAvCY,MAAA,WAAA,IAAA,EAAA,KACL,KAAKT,iBACAA,KAAAA,gBAAgB,KAAKY,eAGzBC,KAAAA,YACAP,KAAAA,WAAaQ,YAAY,WAC1B,EAAKD,aACN,MA+BN,CAAA,IAAA,aA5BY,MAAA,WAETE,cAAc,KAAKT,cA0BtB,CAAA,IAAA,YAvBW,MAAA,WAEJ,KAAKM,eAAiB,GACjBD,KAAAA,aACD,KAAKP,oBACAA,KAAAA,uBAGJQ,KAAAA,eAAiB,IAClB,KAAKV,gBACAA,KAAAA,eAAe,KAAKU,kBAapC,CAAA,IAAA,gBANmB,IAAA,WACTI,OAAAA,WAAW,KAAKpB,oBAAoBqB,QAG7BC,IAAAA,SAAAA,GACTtB,KAAAA,oBAAoBqB,MAAQC,EAAKC,QAAQ,OACjD,EAAA,GAAA,QAAA,QAAA;;ACkJL,aA7BA,IAAA,EAAA,EAAA,QAAA,iBA6BA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA3BA,IAAMC,EAAgBC,SAASC,cAAc,mBACvCzB,EAAgBwB,SAASC,cAAc,iBACvCxB,EAAgBuB,SAASC,cAAc,iBAEvCC,EAAqBF,SAASC,cAAc,eAC5CE,EAAqBH,SAASC,cAAc,oBAG5CG,EAAeF,EAAmBG,aAAa,KAC/CC,EAA8C,EAA3BX,WAAWS,GAAoBG,KAAKC,GAS7DN,EAAmBO,aAAa,mBAAoBH,GACpDH,EAAmBM,aAAa,mBAAoBH,GAKpD,IAAII,EAAoB,EACpBC,EAAqB,EAEnBC,EAAa,IAAItC,EAAJ,QAAeyB,EAAevB,EAAeC,EAAe,CAC3EG,QAAQiC,SAAAA,GAEJF,EAAqBE,GAEzB/B,OAAOS,SAAAA,GAEHmB,EACKJ,EAAmBf,EAAiBoB,EACrCL,EAEJJ,EAAmBO,aAAa,oBAAqBC,IAGzD1B,WAAa,WACT8B,QAAQC,IAAI","file":"apptimer.0185827e.js","sourceRoot":"../src","sourcesContent":["function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","// Kelas menghitung waktu\nexport default class TimerWaktu {\n    constructor(numberDurationInput, startButtonEl, pauseButtonEl, callbacks) {\n        this.numberDurationInput = numberDurationInput;\n        this.startButtonEl = startButtonEl;\n        this.pauseButtonEl = pauseButtonEl;\n\n        if (callbacks) {\n            this.onStartCallback = callbacks.onStart;\n            this.onTickCallback = callbacks.onTick;\n            this.onCompleteCallback = callbacks.onComplete;\n        }\n\n        this.intervalId = 0;\n\n        this.initListenerEl();\n    }\n\n    initListenerEl() {\n        // Menggunakan arrow function untuk memperbaiki masalah this scope\n        this.startButtonEl.addEventListener('click', event => {\n            this.startTimer(event);\n        });\n\n        this.pauseButtonEl.addEventListener('click', event => {\n            this.pauseTimer(event);\n        });\n    }\n\n    // this berisi nilai parameter dan context dimana this ini berada\n    // bisa berisi nilai dari kelas ataupun dari object atau bisa global window\n    startTimer() {\n        if (this.onStartCallback) {\n            this.onStartCallback(this.timeRemaining);\n        }\n\n        this.tickWaktu();\n        this.intervalId = setInterval(() => {\n            this.tickWaktu();\n        }, 20);\n    }\n\n    pauseTimer() {\n        // hentikan timer sementara waktu\n        clearInterval(this.intervalId);\n    }\n\n    tickWaktu() {\n        // Dengan cek getter dan setter\n        if (this.timeRemaining <= 0) {\n            this.pauseTimer();\n            if (this.onCompleteCallback) {\n                this.onCompleteCallback();\n            }\n        } else {\n            this.timeRemaining -= 0.02;\n            if (this.onTickCallback) {\n                this.onTickCallback(this.timeRemaining);\n            }\n        }\n    }\n\n    // Dengan getter dan setter\n    // Menyimpan nilai di dalam DOM\n    get timeRemaining() {\n        return parseFloat(this.numberDurationInput.value);\n    }\n\n    set timeRemaining(time) {\n        this.numberDurationInput.value = time.toFixed(2);\n    }\n}\n","/* eslint-disable max-classes-per-file */\n// TIMERAPP Membuat aplikasi Timer dengan JavaScript\n// class Timer {\n//     constructor(numberDurationInput, startButtonEl, pauseButtonEl) {\n//         this.numberDurationInput = numberDurationInput;\n\n//         // karena ada keyword getter get, tidak perlu pake kurung buka tutup\n//         this.numberSisaWaktu = this.getTimeRemaining();\n\n//         this.startButtonEl = startButtonEl;\n//         this.pauseButtonEl = pauseButtonEl;\n\n//         this.intervalId = 0;\n\n//         this.initListenerEl();\n//     }\n\n//     initListenerEl() {\n//         // Bermasalah dengan scope this karena this berisi nilai startButtonElement\n//         // this.startButtonEl.addEventListener('click', function(event) {\n//         //     console.log(this);\n//         //     this.startTimer(event);\n//         // });\n\n//         // Dengan menggunakan bind untuk memperbaiki masalah this scope\n//         // this.startButtonEl.addEventListener(\n//         //     'click',\n//         //     function(event) {\n//         //         console.log(this);\n//         //         console.log(event);\n//         //     }.bind(this),\n//         // );\n\n//         // Menggunakan arrow function untuk memperbaiki masalah this scope\n//         this.startButtonEl.addEventListener('click', event => {\n//             this.startTimer(event);\n//         });\n\n//         this.pauseButtonEl.addEventListener('click', event => {\n//             this.pauseTimer(event);\n//         });\n//     }\n\n//     // this berisi nilai parameter dan context dimana this ini berada\n//     // bisa berisi nilai dari kelas ataupun dari object atau bisa global window\n//     startTimer() {\n//         this.tickWaktu();\n\n//         this.intervalId = setInterval(() => {\n//             this.tickWaktu();\n//         }, 1000);\n//     }\n\n//     stopTimer() {\n//         clearInterval(this.intervalId);\n//     }\n\n//     pauseTimer() {\n//         // hentikan timer sementara waktu\n//         clearInterval(this.intervalId);\n//     }\n\n//     onDurationChange() {}\n\n//     tickWaktu() {\n//         // Dengan cek getter dan setter\n//         if (this.timeRemaining <= 0) {\n//             this.pauseTimer();\n//         } else {\n//             this.timeRemaining -= 1;\n//         }\n//     }\n\n//     onTick() {\n//         console.log('Waktu berdetik');\n//         if (this.numberSisaWaktu > 0) {\n//             // this.numberSisaWaktu -= 1;\n//             // this.setTimeInput(this.numberSisaWaktu);\n\n//             // dengan getter setter\n//             this.timeRemaining -= 1;\n//             this.numberSisaWaktu = this.timeRemaining;\n//             // this.numberDurationInput.value = this.numberSisaWaktu - 1;\n//         } else {\n//             // this.numberSisaWaktu = 0;\n//             // this.setTimeInput(this.numberSisaWaktu);\n\n//             // Dengan getter setter\n//             this.timeRemaining = 0;\n//             this.stopTimer();\n//         }\n//     }\n\n//     getTimeRemaining() {\n//         return parseFloat(this.numberDurationInput.value);\n//     }\n\n//     setTimeInput(numberTime) {\n//         this.numberDurationInput.value = numberTime;\n//     }\n\n//     // Dengan getter dan setter\n//     // Menyimpan nilai di dalam DOM\n//     get timeRemaining() {\n//         return parseFloat(this.numberDurationInput.value);\n//     }\n\n//     set timeRemaining(time) {\n//         this.numberDurationInput.value = time;\n//     }\n// }\n\n// class TimerWaktu {\n//     constructor(numberDurationInput, startButtonEl, pauseButtonEl, callbacks) {\n//         this.numberDurationInput = numberDurationInput;\n//         this.startButtonEl = startButtonEl;\n//         this.pauseButtonEl = pauseButtonEl;\n\n//         if (callbacks) {\n//             this.onStartCallback = callbacks.onStart;\n//             this.onTickCallback = callbacks.onTick;\n//             this.onCompleteCallback = callbacks.onComplete;\n//         }\n\n//         this.intervalId = 0;\n\n//         this.initListenerEl();\n//     }\n\n//     initListenerEl() {\n//         // Menggunakan arrow function untuk memperbaiki masalah this scope\n//         this.startButtonEl.addEventListener('click', event => {\n//             this.startTimer(event);\n//         });\n\n//         this.pauseButtonEl.addEventListener('click', event => {\n//             this.pauseTimer(event);\n//         });\n//     }\n\n//     // this berisi nilai parameter dan context dimana this ini berada\n//     // bisa berisi nilai dari kelas ataupun dari object atau bisa global window\n//     startTimer() {\n//         if (this.onStartCallback) {\n//             this.onStartCallback();\n//         }\n\n//         this.tickWaktu();\n//         this.intervalId = setInterval(() => {\n//             this.tickWaktu();\n//         }, 1000);\n//     }\n\n//     pauseTimer() {\n//         // hentikan timer sementara waktu\n//         clearInterval(this.intervalId);\n//     }\n\n//     onDurationChange() {}\n\n//     tickWaktu() {\n//         // Dengan cek getter dan setter\n//         if (this.timeRemaining <= 0) {\n//             this.pauseTimer();\n//             if (this.onCompleteCallback) {\n//                 this.onCompleteCallback();\n//             }\n//         } else {\n//             this.timeRemaining -= 1;\n//             if (this.onTickCallback) {\n//                 this.onTickCallback();\n//             }\n//         }\n//     }\n\n//     // Dengan getter dan setter\n//     // Menyimpan nilai di dalam DOM\n//     get timeRemaining() {\n//         return parseFloat(this.numberDurationInput.value);\n//     }\n\n//     set timeRemaining(time) {\n//         this.numberDurationInput.value = time;\n//     }\n// }\n\n// Dengan ES2015 Import\nimport TimerWaktu from './TimerWaktu';\n\nconst durasiInputEl = document.querySelector('#input_duration');\nconst startButtonEl = document.querySelector('#button_start');\nconst pauseButtonEl = document.querySelector('#button_pause');\n\nconst circleTimerElement = document.querySelector('#lingkarjam');\nconst latarCircleTimerEl = document.querySelector('#latarlingkarjam');\n\n// kalkulasi besaran panjang lingkar dengan bantuan radius\nconst radiusString = circleTimerElement.getAttribute('r');\nconst lingkarPerimeter = parseFloat(radiusString) * 2 * Math.PI;\n\n// Rumus menghitung offset untuk stroke dash offset\n// offset = (perimeter * timeRemaining / totalDuration) - perimeter\n// Contoh perimeter = 365 , total duration = 30\n// offset start = (365 * 30 / 30) - 365 =  0\n// offset ending selesai waktu = (365 * 0 / 30) - 365 = -365\n\n// Set attribute ke element lingkaran\ncircleTimerElement.setAttribute('stroke-dasharray', lingkarPerimeter);\nlatarCircleTimerEl.setAttribute('stroke-dasharray', lingkarPerimeter);\n\n// const timerWaktu = new TimerWaktu(durasiInputEl, startButtonEl, pauseButtonEl);\n\n// Menggunakan Callback\nlet currentOffsetDash = 0;\nlet totalDurationTimer = 0;\n\nconst timerWaktu = new TimerWaktu(durasiInputEl, startButtonEl, pauseButtonEl, {\n    onStart(totalDuration) {\n        // console.log('Timer dimulai callback');\n        totalDurationTimer = totalDuration;\n    },\n    onTick(timeRemaining) {\n        // console.log('Timer sedang berdetik');\n        currentOffsetDash =\n            (lingkarPerimeter * timeRemaining) / totalDurationTimer -\n            lingkarPerimeter;\n\n        circleTimerElement.setAttribute('stroke-dashoffset', currentOffsetDash);\n        // currentOffsetDash -= 1;\n    },\n    onComplete() {\n        console.log('Timer sudah selesai');\n    },\n});\n"]}